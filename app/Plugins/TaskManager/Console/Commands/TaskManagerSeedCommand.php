<?php

namespace App\Plugins\TaskManager\Console\Commands;

use Illuminate\Console\Command;
use App\Plugins\TaskManager\Models\Task;
use App\Plugins\TaskManager\Models\Category;
use App\Models\User;
use Illuminate\Support\Facades\DB;

/**
 * Commande de cr√©ation de donn√©es de test pour Task Manager
 *
 * Cette commande cr√©e des donn√©es de test r√©alistes pour le plugin :
 * - Cat√©gories de t√¢ches
 * - T√¢ches avec diff√©rents statuts et priorit√©s
 * - Relations entre utilisateurs et t√¢ches
 */
class TaskManagerSeedCommand extends Command
{
    /**
     * Le nom et la signature de la commande.
     */
    protected $signature = 'task-manager:seed
                            {--count=50 : Nombre de t√¢ches √† cr√©er}
                            {--users=5 : Nombre d\'utilisateurs √† utiliser}
                            {--categories=8 : Nombre de cat√©gories √† cr√©er}
                            {--force : Forcer la cr√©ation m√™me si des donn√©es existent}';

    /**
     * La description de la commande.
     */
    protected $description = 'Cr√©e des donn√©es de test pour le plugin Task Manager';

    /**
     * Ex√©cute la commande.
     */
    public function handle(): int
    {
        $this->info('üå± Cr√©ation de donn√©es de test pour Task Manager...');

        try {
            // V√©rifier si des donn√©es existent d√©j√†
            if (Task::count() > 0 && !$this->option('force')) {
                $this->warn('‚ö†Ô∏è  Des t√¢ches existent d√©j√† dans la base de donn√©es.');

                if (!$this->confirm('Voulez-vous continuer et ajouter plus de donn√©es ?', false)) {
                    $this->info('‚ùå Op√©ration annul√©e.');
                    return self::FAILURE;
                }
            }

            // 1. Cr√©er les cat√©gories
            $categories = $this->createCategories();

            // 2. R√©cup√©rer ou cr√©er les utilisateurs
            $users = $this->getUsers();

            // 3. Cr√©er les t√¢ches
            $this->createTasks($categories, $users);

            $this->info('‚úÖ Donn√©es de test cr√©√©es avec succ√®s !');
            $this->displayStats();

            return self::SUCCESS;

        } catch (\Exception $e) {
            $this->error('‚ùå Erreur lors de la cr√©ation des donn√©es : ' . $e->getMessage());
            return self::FAILURE;
        }
    }

    /**
     * Cr√©e les cat√©gories de t√¢ches.
     */
    protected function createCategories(): \Illuminate\Database\Eloquent\Collection
    {
        $this->info('üìÇ Cr√©ation des cat√©gories...');

        $categoryData = [
            ['name' => 'D√©veloppement', 'description' => 'T√¢ches li√©es au d√©veloppement', 'color' => '#3B82F6'],
            ['name' => 'Design', 'description' => 'T√¢ches de design et UI/UX', 'color' => '#8B5CF6'],
            ['name' => 'Marketing', 'description' => 'T√¢ches marketing et communication', 'color' => '#10B981'],
            ['name' => 'Support', 'description' => 'Support client et maintenance', 'color' => '#F59E0B'],
            ['name' => 'Administration', 'description' => 'T√¢ches administratives', 'color' => '#6B7280'],
            ['name' => 'Urgent', 'description' => 'T√¢ches urgentes √† traiter', 'color' => '#EF4444'],
            ['name' => 'Planification', 'description' => 'Planification et strat√©gie', 'color' => '#06B6D4'],
            ['name' => 'Qualit√©', 'description' => 'Tests et assurance qualit√©', 'color' => '#84CC16'],
        ];

        $categories = Category::whereIn('name', array_column($categoryData, 'name'))->get();
        $count = min($this->option('categories'), count($categoryData));

        for ($i = 0; $i < $count; $i++) {
            $category = Category::firstOrCreate(
                ['name' => $categoryData[$i]['name']],
                array_merge($categoryData[$i], [
                    'created_at' => now(),
                    'updated_at' => now(),
                ])
            );
            if (!$categories->contains('id', $category->id)) {
                $categories->push($category);
            }
        }

        $this->info("‚úÖ {$categories->count()} cat√©gories cr√©√©es.");
        return $categories;
    }

    /**
     * R√©cup√®re ou cr√©e les utilisateurs.
     */
    protected function getUsers(): \Illuminate\Database\Eloquent\Collection
    {
        $this->info('üë• R√©cup√©ration des utilisateurs...');

        $users = User::take($this->option('users'))->get();

        if ($users->isEmpty()) {
            $this->warn('‚ö†Ô∏è  Aucun utilisateur trouv√©. Cr√©ation d\'utilisateurs de test...');

            // Cr√©er des utilisateurs de test
            $userData = [
                ['name' => 'John Doe', 'email' => 'john@example.com'],
                ['name' => 'Jane Smith', 'email' => 'jane@example.com'],
                ['name' => 'Bob Johnson', 'email' => 'bob@example.com'],
                ['name' => 'Alice Brown', 'email' => 'alice@example.com'],
                ['name' => 'Charlie Wilson', 'email' => 'charlie@example.com'],
            ];

            foreach ($userData as $data) {
                $users->push(User::firstOrCreate(
                    ['email' => $data['email']],
                    array_merge($data, ['password' => bcrypt('password')])
                ));
            }
        }

        $this->info("‚úÖ {$users->count()} utilisateurs disponibles.");
        return $users;
    }

    /**
     * Cr√©e les t√¢ches de test.
     */
    protected function createTasks($categories, $users): void
    {
        $this->info('üìù Cr√©ation des t√¢ches...');

        $taskTemplates = [
            [
                'titles' => [
                    'Impl√©menter la fonctionnalit√© de recherche',
                    'Cr√©er l\'interface utilisateur responsive',
                    'Optimiser les performances de la base de donn√©es',
                    'Corriger les bugs de validation',
                    'Ajouter les tests unitaires',
                ],
                'descriptions' => [
                    'D√©velopper une fonctionnalit√© de recherche avanc√©e avec filtres multiples.',
                    'Cr√©er une interface utilisateur responsive pour tous les appareils.',
                    'Optimiser les requ√™tes de base de donn√©es pour am√©liorer les performances.',
                    'Corriger les probl√®mes de validation des formulaires.',
                    '√âcrire des tests unitaires complets pour les nouvelles fonctionnalit√©s.',
                ],
                'status' => 'in_progress',
                'priority' => 'high',
            ],
            [
                'titles' => [
                    'R√©viser le design du logo',
                    'Cr√©er les maquettes pour la page d\'accueil',
                    'Optimiser l\'exp√©rience utilisateur',
                    'Cr√©er les ic√¥nes personnalis√©es',
                    'Finaliser la charte graphique',
                ],
                'descriptions' => [
                    'R√©viser et am√©liorer le design du logo de l\'entreprise.',
                    'Cr√©er des maquettes d√©taill√©es pour la nouvelle page d\'accueil.',
                    'Analyser et optimiser l\'exp√©rience utilisateur globale.',
                    'Cr√©er un ensemble d\'ic√¥nes personnalis√©es pour l\'application.',
                    'Finaliser la charte graphique compl√®te de l\'entreprise.',
                ],
                'status' => 'pending',
                'priority' => 'medium',
            ],
            [
                'titles' => [
                    'Lancer la campagne email',
                    'Cr√©er le contenu pour les r√©seaux sociaux',
                    'Analyser les m√©triques de conversion',
                    'Optimiser le SEO du site web',
                    'Planifier la strat√©gie marketing Q4',
                ],
                'descriptions' => [
                    'Lancer une campagne email marketing cibl√©e.',
                    'Cr√©er du contenu engageant pour les r√©seaux sociaux.',
                    'Analyser et optimiser les m√©triques de conversion.',
                    'Am√©liorer le r√©f√©rencement naturel du site web.',
                    'Planifier la strat√©gie marketing pour le 4√®me trimestre.',
                ],
                'status' => 'completed',
                'priority' => 'low',
            ],
        ];

        $count = $this->option('count');
        $bar = $this->output->createProgressBar($count);

        for ($i = 0; $i < $count; $i++) {
            $template = $taskTemplates[array_rand($taskTemplates)];
            $titleIndex = array_rand($template['titles']);
            $descriptionIndex = array_rand($template['descriptions']);

            $task = Task::create([
                'title' => $template['titles'][$titleIndex],
                'description' => $template['descriptions'][$descriptionIndex],
                'status' => $template['status'],
                'priority' => $template['priority'],
                'progress' => rand(0, 100),
                'due_date' => now()->addDays(rand(-30, 60)),
                'category_id' => $categories->random()->id,
                'created_by' => $users->random()->id,
                'assigned_to' => $users->random()->id,
                'is_public' => rand(0, 1),
                'estimated_hours' => rand(1, 40),
                'actual_hours' => rand(0, 35),
            ]);

            $bar->advance();
        }

        $bar->finish();
        $this->newLine();
        $this->info("‚úÖ {$count} t√¢ches cr√©√©es avec succ√®s.");
    }

    /**
     * Affiche les statistiques des donn√©es cr√©√©es.
     */
    protected function displayStats(): void
    {
        $this->newLine();
        $this->info('üìä Statistiques des donn√©es cr√©√©es :');

        $this->table(
            ['M√©trique', 'Valeur'],
            [
                ['Total des t√¢ches', Task::count()],
                ['T√¢ches en attente', Task::where('status', 'pending')->count()],
                ['T√¢ches en cours', Task::where('status', 'in_progress')->count()],
                ['T√¢ches termin√©es', Task::where('status', 'completed')->count()],
                ['T√¢ches en retard', Task::overdue()->count()],
                ['Cat√©gories', Category::count()],
                ['Utilisateurs impliqu√©s', User::whereHas('assignedTasks')->count()],
            ]
        );
    }
}
